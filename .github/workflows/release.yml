name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release'
        required: true
        default: '1.0.0'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', 3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install setuptools wheel
        pip install -r requirements.txt
        pip install "git+https://github.com/modelcontextprotocol/python-sdk.git"
        pip install pytest pytest-asyncio
        pip install -e .
    
    - name: Setup decompilers
      run: ./setup_decompilers.sh
    
    - name: Run tests
      run: |
        python test_startup.py
        python -c "from maven_decoder_mcp import MavenDecoderServer; print('✅ Package import successful')"

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        registry-url: 'https://registry.npmjs.org'
    
    - name: Set up Java
      uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build wheel twine setuptools
        pip install -r requirements.txt
        pip install "git+https://github.com/modelcontextprotocol/python-sdk.git"
    
    - name: Setup decompilers
      run: ./setup_decompilers.sh
    
    - name: Build Python package
      run: |
        python -m build
    
    - name: Build npm package
      run: |
        npm pack
    
    - name: Create release notes
      run: |
        cat > RELEASE_NOTES.md << 'EOF'
        # Maven Decoder MCP Server ${{ github.ref_name }}
        
        ## Features
        - 🔍 Comprehensive jar file analysis
        - 🛠️ Advanced decompilation with multiple decompilers
        - 📦 Complete Maven integration and dependency analysis
        - 🔗 Cross-reference analysis and usage examples
        - 🚀 Multiple installation methods (pip, npm, Docker)
        
        ## Installation
        
        ### Quick Install
        ```bash
        curl -fsSL https://raw.githubusercontent.com/maven-decoder/maven-decoder-mcp/main/install.sh | bash
        ```
        
        ### Python/pip
        ```bash
        pip install maven-decoder-mcp
        ```
        
        ### Node.js/npm
        ```bash
        npm install -g maven-decoder-mcp
        ```
        
        ### Docker
        ```bash
        docker run --rm -it \
          -v ~/.m2:/home/mcpuser/.m2 \
          maven-decoder/mcp-server:latest
        ```
        EOF
    
    - name: Upload Python package to PyPI
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        echo "Checking environment variables..."
        echo "TWINE_USERNAME is set: ${{ env.TWINE_USERNAME != '' }}"
        echo "PYPI_API_TOKEN is set: ${{ secrets.PYPI_API_TOKEN != '' }}"
        echo "Token starts with pypi-: ${{ startsWith(secrets.PYPI_API_TOKEN, 'pypi-') }}"
        
        # Alternative: Create .pypirc file
        echo "Creating .pypirc file..."
        cat > ~/.pypirc << EOF
        [distutils]
        index-servers = pypi
        
        [pypi]
        repository = https://upload.pypi.org/legacy/
        username = __token__
        password = ${{ secrets.PYPI_API_TOKEN }}
        EOF
        
        echo "Uploading with twine..."
        twine upload --config-file ~/.pypirc dist/*
    
    - name: Publish npm package
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      env:
        NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      run: |
        npm publish maven-decoder-mcp-*.tgz
    
    - name: Create GitHub Release
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          dist/*
          maven-decoder-mcp-*.tgz
          RELEASE_NOTES.md
        body_path: RELEASE_NOTES.md
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to Docker Hub
      if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ali79taba/maven-decoder-mcp
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build Python package first
      run: |
        python -m pip install --upgrade pip build wheel setuptools
        pip install -r requirements.txt
        python -m build
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/') }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        platforms: linux/amd64,linux/arm64
